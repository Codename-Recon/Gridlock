name: "client releases"
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  GODOT_VERSION: 4.3
  EXPORT_NAME: Gridlock
  PROJECT_PATH: client

permissions:
  contents: write

jobs:
  create-releases:
    name: Release
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:4.3
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          lfs: true
      - name: Setup
        uses: ./.github/actions/setup-client-for-export
      - name: Builds
        run: |
          cd $PROJECT_PATH
          godot --headless --verbose --export-release "Windows Desktop" ../build/windows/$EXPORT_NAME.exe
          godot --headless --verbose --export-release "Linux/X11" ../build/linux/$EXPORT_NAME.x86_64
          godot --headless --verbose --export-release "Web" ../build/web/index.html
          godot --headless --verbose --export-release "macOS" ../build/mac/$EXPORT_NAME.zip
          cd ../build/
          zip -r Web.zip web/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          # TODO: Body generated by conventional commits
          # body:
      - name: Upload Release Windows
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build/windows/${{ env.EXPORT_NAME }}.exe
          asset_name: ${{ env.EXPORT_NAME }}.exe
          asset_content_type: application/zip
      - name: Upload Release Linux
        id: upload-release-asset-linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build/linux/${{ env.EXPORT_NAME }}.x86_64
          asset_name: ${{ env.EXPORT_NAME }}.x86_64
          asset_content_type: application/zip
      - name: Upload Release Mac
        id: upload-release-asset-mac
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build/mac/${{ env.EXPORT_NAME }}.zip
          asset_name: ${{ env.EXPORT_NAME }}.zip
          asset_content_type: application/zip
      - name: Upload Release Web
        id: upload-release-asset-web
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: ./build/Web.zip
          asset_name: Web.zip
          asset_content_type: application/zip 
      - name: Depoly Itch.io Windows
        id: deploay-itch-windows
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
          ITCHIO_USERNAME: ${{ vars.ITCHIO_USERNAME }}
          ITCHIO_GAME: ${{ vars.ITCHIO_GAME }}
        run: butler push ./build/windows/${{ env.EXPORT_NAME }}.exe $ITCHIO_USERNAME/$ITCHIO_GAME:windows --userversion $GITHUB_REF_NAME
      - name: Depoly Itch.io Linux
        id: deploay-itch-linux
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
          ITCHIO_USERNAME: ${{ vars.ITCHIO_USERNAME }}
          ITCHIO_GAME: ${{ vars.ITCHIO_GAME }}
        run: butler push ./build/linux/${{ env.EXPORT_NAME }}.x86_64 $ITCHIO_USERNAME/$ITCHIO_GAME:linux --userversion $GITHUB_REF_NAME
      - name: Depoly Itch.io Mac
        id: deploay-itch-mac
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
          ITCHIO_USERNAME: ${{ vars.ITCHIO_USERNAME }}
          ITCHIO_GAME: ${{ vars.ITCHIO_GAME }}
        run: butler push ./build/mac/${{ env.EXPORT_NAME }}.zip $ITCHIO_USERNAME/$ITCHIO_GAME:mac --userversion $GITHUB_REF_NAME
      - name: Depoly Itch.io Web
        id: deploay-itch-web
        env:
          BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
          ITCHIO_USERNAME: ${{ vars.ITCHIO_USERNAME }}
          ITCHIO_GAME: ${{ vars.ITCHIO_GAME }}
        run: butler push ./build/web/ $ITCHIO_USERNAME/$ITCHIO_GAME:html --userversion $GITHUB_REF_NAME